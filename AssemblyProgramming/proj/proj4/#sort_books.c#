#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/*
 * Following is straight from the project description
 */
#define TITLE_LEN       32
#define AUTHOR_LEN      20
#define SUBJECT_LEN     10
#define TITLE_LEN_TEMP_BUFFER 81 


struct book {
    char author[AUTHOR_LEN + 1];    /* first author */
    char title[TITLE_LEN + 1];
    char subject[SUBJECT_LEN + 1];  /* Nonfiction, Fantasy, Mystery, ... */
    unsigned int year;              /* year of e-book release */
};


/*
 * Declarations for functions that are defined in other files
 */
extern int bookcmp(void);

/*
 * Declarations for global variables that need to be accessed
 * from other files
 */
struct book *book1;
struct book *book2;

#define MAX_BOOKS 100

/*
 * sort_books(): receives an array of struct book's, of length
 * numBooks.  Sorts the array in-place (i.e., actually modifies
 * the elements of the array).
 *
 * This is almost exactly what was given in the pseudocode in
 * the project spec--need to replace STUBS with real code
 */


void sort_books(struct book books[], int numBooks) {
    int i, j, min;
    int cmpResult;

    for (i = 0; i < numBooks - 1; i++) {
      for (j = i + 1; j < numBooks; j++) {
	  min = i;
	    /* Copy pointers to the two books to be compared into the
	     * global variables book1 and book2 for bookcmp() to see
	     */
	  book1 = &books[i];
	  book2 = &books[j];

	  cmpResult = bookcmp();
	  /* bookcmp returns result in register EAX--above saves
	   * it into cmpResult */
	  ,,
	  if (cmpResult > 0) {
	      min = j;
	  }
	
	  if (min != i) {
	    struct book tmpBook;
	    tmpBook = books[i];
	    books[i] = books[min];
	    books[min] = tmpBook;
	  }
	}
    }

}

void print_books(struct book books[], int numBooks) {
  int i;
  for (i = 0; i < numBooks; i++){
    printf("%s, %s, %s, %u\n", books[i].title, books[i].author, books[i].subject, books[i].year);
  }

}

int main(int argc, char **argv) {
    struct book books[MAX_BOOKS];
    int numBooks;
    char titleTempBuffer[81];
    unsigned int i;
OM    int numFields;

    for (i = 0; i < MAX_BOOKS; i++) {
	/* Sample line: "Breaking Point, Pamela Clare, Romance, 2011" */

	/* We are giving you the scanf() format string; note that
	 * for the string fields, it uses the conversion spec "%##[^,]",
	 * where "##" is an actual number. This says to read up to a
	 * maximum of ## characters (not counting the null terminator!),
	 * stopping at the first ','  Also note that the first field spec--
	 * the title field--specifies 80 chars.  The title field is NOT
	 * that large, so you need to read it into a temporary buffer first,
	 * of an appropriately large size so that scanf() doesn't overrun it.
	 * All the other fields should be read directly into the struct book's
	 * members.
	 */
        numFields = scanf("%80[^,], %20[^,], %10[^,], %u \n", titleTempBuffer, books[i].author, books[i].subject, &books[i].year);

	/*	printf("Number of fields is: %d", numFields);
	printf( " || titleTempBuffer is: %s", titleTempBuffer);
	*/if (numFields == EOF) {
	    numBooks = i;
	    break;
	}

	/* Now, process the record you just read.
	 * First, confirm that you got all the fields you needed (scanf()
	 * returns the actual number of fields matched).
	 * Then, post-process title (see project spec for reason)
	 */

	if (numFields != 4){
	  printf("Error while reading files, book not read correctly\n");
	}

	/*grab each book, and store the first 32 characters. */
	strncpy(books[i].title, titleTempBuffer, 32);
	
    }

    /* Following assumes you stored actual number of books read into
     * var numBooks
     */
    sort_books(books, numBooks);

    print_books(books, numBooks);

    exit(1);
}

